plugins {
    id 'org.liquibase.gradle' version '2.0.4'
    id 'java'
    id 'war'
}

group = 'com.ilyastuit'
version = '1.0'
targetCompatibility = 11
sourceCompatibility = 11

jar {
    enabled = false
}

war {
    getArchiveFileName().set("backend-tomcat.war")
}

configurations {
    unitTestImplementation.extendsFrom(testImplementation)
    unitTestRuntimeOnly.extendsFrom(testRuntimeOnly)

    integrationTestImplementation.extendsFrom(testImplementation)
    integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

dependencies {
    // Spring
    implementation("org.springframework:spring-aop:${rootProject.ext.springVersion}")
    implementation("org.springframework:spring-beans:${rootProject.ext.springVersion}")
    implementation("org.springframework:spring-context:${rootProject.ext.springVersion}")
    implementation("org.springframework:spring-core:${rootProject.ext.springVersion}")
    implementation("org.springframework:spring-expression:${rootProject.ext.springVersion}")
    implementation("org.springframework:spring-web:${rootProject.ext.springVersion}")
    implementation("org.springframework:spring-webmvc:${rootProject.ext.springVersion}")
    implementation("org.springframework:spring-orm:${rootProject.ext.springVersion}")

    // Javax (Jakarta) API
    compileOnly("javax.servlet:javax.servlet-api:${rootProject.ext.servletVersion}")
    compileOnly("jakarta.validation:jakarta.validation-api:${rootProject.ext.jakartaValidationVersion}")

    // Javax (Jakarta) Implementation
    implementation("org.hibernate.validator:hibernate-validator:${rootProject.ext.hibernateValidatorVersion}") {
        exclude group: "jakarta.validation", module: "jakarta.validation-api"
    }

    // Logging
    implementation("ch.qos.logback:logback-classic:${rootProject.ext.logbackVersion}")

    // Persistence
    implementation("org.hibernate:hibernate-core:${rootProject.ext.hibernateVersion}")
    implementation("org.hibernate:hibernate-entitymanager:${rootProject.ext.hibernateVersion}")
    implementation("org.hibernate:hibernate-hikaricp:${rootProject.ext.hibernateVersion}")
    implementation("com.zaxxer:HikariCP:${rootProject.ext.hikariCPVersion}")

    // Other
    implementation("at.favre.lib:bcrypt:${rootProject.ext.bcryptLibraryVersion}")

    // Database Migration
    liquibaseRuntime("org.liquibase:liquibase-core:${rootProject.ext.liquibaseVersion}")
    liquibaseRuntime("org.postgresql:postgresql:${rootProject.ext.postgresVersion}")

    // Driver
    runtimeOnly("org.postgresql:postgresql:${rootProject.ext.postgresVersion}")

    // Unit Test
    unitTestImplementation("org.junit.jupiter:junit-jupiter-api:${rootProject.ext.jupiterApiVersion}")
    unitTestImplementation("org.junit.jupiter:junit-jupiter-params:${rootProject.ext.jupiterParamsVersion}")
    unitTestImplementation("org.mockito:mockito-junit-jupiter:${rootProject.ext.mockitoJunitJupiterVersion}")
    unitTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${rootProject.ext.jupiterEngineVersion}")

    // Integration Test
    integrationTestImplementation("com.intuit.karate:karate-junit5:${rootProject.ext.karateJunit5Version}")
    integrationTestImplementation("com.intuit.karate:karate-apache:${rootProject.ext.karateApacheVersion}")
}

sourceSets {

    main {
        java.srcDirs('./src/main/java')
        resources.srcDirs('./src/main/resources')
    }

    unitTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('./src/unitTest/java')
        }
        resources.srcDir file('./src/unitTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output

            resources {
                srcDir file('./src/integrationTest/java')
                exclude '**/*.java'
            }
        }
        resources.srcDir file('./src/integrationTest/resources')
    }
}

tasks.withType(ProcessResources) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Test) {
    testLogging {
        events = ["passed", "failed", "skipped"]
        showStandardStreams = true
    }

    useJUnitPlatform()
}

task unitTest(type: Test) {
    description = 'Runs unit tests.'
    group = 'verification'

    testClassesDirs = sourceSets.unitTest.output.classesDirs
    classpath = sourceSets.unitTest.runtimeClasspath
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    systemProperty "karate.options", System.properties.getProperty("karate.options")
    systemProperty "karate.env", System.properties.getProperty("karate.env")

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    shouldRunAfter unitTest
}

liquibase {
    activities {
        main {
            File propsFile = new File("${rootDir}/${rootProject.ext.backendProjectDir}/src/main/resources/migrations/liquibase-${rootProject.ext.appEnv}.properties")
            Properties properties = new Properties()
            properties.load(new FileInputStream(propsFile))

            url properties['url']
            driver properties['driver']
            username properties['username']
            password properties['password']

            changeLogFile properties['changeLogFile']
        }
    }
}
